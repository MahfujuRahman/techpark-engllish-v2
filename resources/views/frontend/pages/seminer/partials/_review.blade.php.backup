@php
    @php
    // Normalize $review for both Eloquent model and plain arra@php
    // Normalize $review for both Eloquent model and plain array/stdClass from JSON
    $r = $review;
    // if it's an array, convert to object
    if (is_array($r)) {
        $r = (object) $r;
    }

    $reviewId = $r->id ?? null;
    $level = $level ?? 0; // Track nesting level (0 = top level, 1 = reply, 2 = reply to reply)
    $maxLevel = 2; // Maximum 3 levels (0, 1, 2) like Facebook

    // name resolution: prefer user relation, then name field, else 'Anonymous'
    $reviewAuthor = 'Anonymous';
    if (isset($r->user) && is_object($r->user) && isset($r->user->first_name) && $r->user->first_name) {
        $reviewAuthor = $r->user->first_name;
    } elseif (!empty($r->name)) {
        $reviewAuthor = $r->name;
    }

    // created_at: if Carbon instance, use diffForHumans, else print string
    $created = '';
    if (!empty($r->created_at)) {
        try {
            if (is_object($r->created_at) && method_exists($r->created_at, 'diffForHumans')) {
                $created = $r->created_at->diffForHumans();
            } else {
                $created = \Carbon\Carbon::parse($r->created_at)->diffForHumans();
            }
        } catch (\Exception $e) {
            $created = (string) $r->created_at;
        }
    }

    $rating = $r->rating ?? null;
    $commentText = $r->comment ?? ($r->review ?? '');

    // Truncate long comments for "See more" functionality
    $maxLength = 150;
    $isLongComment = strlen($commentText) > $maxLength;
    $shortComment = $isLongComment ? substr($commentText, 0, $maxLength) : $commentText;

    // ensure replies is a collection (or array) we can iterate
    $replies = collect();
    if (!empty($r->replies)) {
        // if replies is array or collection, normalize to collection of objects
        $replies = collect($r->replies)->map(function ($it) {
            if (is_array($it)) {
                return (object) $it;
            }
            return $it;
        })->filter(function ($reply) {
            // Filter out invalid or empty replies
            return !empty($reply) && !empty($reply->comment);
        });
    }

    // Count total replies recursively (using closure to avoid redeclaration)
    $countAllReplies = function($replies) use (&$countAllReplies) {
        if (!$replies || (!is_array($replies) && !$replies instanceof \Illuminate\Support\Collection)) {
            return 0;
        }
        $count = $replies instanceof \Illuminate\Support\Collection ? $replies->count() : count($replies);
        foreach ($replies as $reply) {
            if (isset($reply->replies) && !empty($reply->replies)) {
                $nestedReplies = collect($reply->replies)->filter(function ($r) {
                    return !empty($r) && !empty($r->comment);
                });
                if ($nestedReplies->count() > 0) {
                    $count += $countAllReplies($nestedReplies);
                }
            }
        }
        return $count;
    };

    $totalReplies = $countAllReplies($replies);

    // Determine if we can still add replies at this level
    $canReply = $level < $maxLevel;
@endphp

<div class="facebook-comment {{ $level > 0 ? 'reply-comment' : 'main-comment' }} {{ $level >= 2 ? 'last-level' : '' }}"
    id="review-{{ $reviewId ?? 'anon' }}" data-level="{{ $level }}" data-review-id="{{ $reviewId ?? '' }}" data-total-replies="{{ $totalReplies }}">

    <div class="comment-content">
        <div class="d-flex">
            <div class="flex-shrink-0">
                <div class="comment-avatar {{ $level > 0 ? 'reply-avatar' : 'main-avatar' }}">
                    {{ strtoupper(substr($reviewAuthor, 0, 1)) }}
                </div>
            </div>
            <div class="flex-grow-1 ms-3">
                <div class="comment-bubble">
                    <div class="comment-header">
                        <strong class="comment-author">{{ $reviewAuthor }}</strong>
                        @if (isset($r->is_admin) && $r->is_admin)
                            <span class="admin-badge">Admin</span>
                        @endif
                    </div>

                    @if ($rating && $level === 0)
                        <div class="rating-stars">
                            @for ($i = 0; $i < $rating; $i++)
                                â˜…
                            @endfor
                        </div>
                    @endif

                    <div class="comment-text">
                        <span class="comment-short {{ $isLongComment ? '' : 'd-none' }}">
                            {{ $shortComment }}...
                        </span>
                        <span class="comment-full {{ !$isLongComment ? '' : 'd-none' }}">
                            {{ $commentText }}
                        </span>
                        @if ($isLongComment)
                            <button class="see-more-btn btn-link" onclick="toggleComment(this)">See more</button>
                        @endif
                    </div>
                </div>

                <div class="comment-actions">
                    @if ($canReply)
                        <button class="action-btn reply-btn" data-id="{{ $reviewId ?? '' }}">
                            <i class="fas fa-reply"></i> Reply
                        </button>
                    @endif

                    @if ($totalReplies > 0 && $replies->count() > 0)
                        @if ($level === 0)
                            <button class="action-btn view-replies-btn" onclick="toggleReplies(this)">
                                <i class="fas fa-comments"></i> View {{ $totalReplies }}
                                {{ $totalReplies === 1 ? 'reply' : 'replies' }}
                            </button>
                        @else
                            <button class="action-btn view-replies-btn" onclick="toggleReplies(this)">
                                <i class="fas fa-comments"></i> {{ $totalReplies }}
                                {{ $totalReplies === 1 ? 'reply' : 'replies' }}
                            </button>
                        @endif
                    @endif

                    <span class="comment-time">{{ $created }}</span>
                </div>

                {{-- Reply Form --}}
                @if ($canReply)
                    <div class="reply-form-container d-none">
                        <form class="reply-form" method="POST"
                            action="{{ route('seminar.review.reply', $reviewId ?? '') }}">
                            @csrf
                            <input type="hidden" name="parent_id" value="{{ $reviewId ?? '' }}">
                            <input type="hidden" name="seminar_id" value="{{ request()->route('id') ?? '' }}">

                            @if (!auth()->check())
                                <div class="mb-2">
                                    <input type="text" name="name" class="form-control form-control-sm"
                                        placeholder="Your name" required>
                                </div>
                                <div class="mb-2">
                                    <input type="email" name="email" class="form-control form-control-sm"
                                        placeholder="Your email" required>
                                </div>
                            @endif

                            <div class="mb-2">
                                <textarea name="comment" class="form-control form-control-sm" rows="2" placeholder="Write a reply..." required></textarea>
                            </div>

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary btn-sm">Reply</button>
                                <button type="button" class="btn btn-link btn-sm cancel-reply">Cancel</button>
                            </div>
                        </form>
                    </div>
                @endif
            </div>
        </div>
    </div>

    {{-- Replies container --}}
    @if (!empty($replies) && $replies->count() > 0 && $totalReplies > 0)
        <div class="replies-container {{ $level === 0 ? 'main-replies' : 'nested-replies' }} {{ $level >= 1 ? 'd-none' : '' }}"
             data-level="{{ $level }}">
            @foreach ($replies as $reply)
                @php
                    // Skip if reply duplicates the parent
                    $skip = false;
                    $rep = $reply;
                    if (is_array($rep)) {
                        $rep = (object) $rep;
                    }
                    if (!empty($rep->id) && !empty($reviewId) && $rep->id == $reviewId) {
                        $skip = true;
                    }
                    // or identical comment + timestamp
                    if (
                        !$skip &&
                        isset($rep->comment) &&
                        isset($r->comment) &&
                        isset($rep->created_at) &&
                        isset($r->created_at)
                    ) {
                        if (
                            trim((string) $rep->comment) === trim((string) $r->comment) &&
                            (string) $rep->created_at === (string) $r->created_at
                        ) {
                            $skip = true;
                        }
                    }
                @endphp
                @if (!$skip)
                    @include('frontend.pages.seminer.partials._review', [
                        'review' => $reply,
                        'level' => $level + 1,
                    ])
                @endif
            @endforeach
        </div>
    @endif
</div>m JSON
    $r = $review;
    // if it's an array, convert to object
    if (is_array($r)) {
        $r = (object) $r;
    }

    $reviewId = $r->id ?? null;
    $level = $level ?? 0; // Track nesting level (0 = top level, 1 = reply, 2 = reply to reply)
    $maxLevel = 2; // Maximum 3 levels (0, 1, 2) like Facebook

    // name resolution: prefer user relation, then name field, else 'Anonymous'
    $reviewAuthor = 'Anonymous';
    if (isset($r->user) && is_object($r->user) && isset($r->user->first_name) && $r->user->first_name) {
        $reviewAuthor = $r->user->first_name;
    } elseif (!empty($r->name)) {
        $reviewAuthor = $r->name;
    }

    // created_at: if Carbon instance, use diffForHumans, else print string
    $created = '';
    if (!empty($r->created_at)) {
        try {
            if (is_object($r->created_at) && method_exists($r->created_at, 'diffForHumans')) {
                $created = $r->created_at->diffForHumans();
            } else {
                $created = \Carbon\Carbon::parse($r->created_at)->diffForHumans();
            }
        } catch (\Exception $e) {
            $created = (string) $r->created_at;
        }
    }

    $rating = $r->rating ?? null;
    $commentText = $r->comment ?? ($r->review ?? '');

    // Truncate long comments for "See more" functionality
    $maxLength = 150;
    $isLongComment = strlen($commentText) > $maxLength;
    $shortComment = $isLongComment ? substr($commentText, 0, $maxLength) : $commentText;

    // ensure replies is a collection (or array) we can iterate
    $replies = collect();
    if (!empty($r->replies)) {
        // if replies is array or collection, normalize to collection of objects
        $replies = collect($r->replies)->map(function ($it) {
            if (is_array($it)) {
                return (object) $it;
            }
            return $it;
        })->filter(function ($reply) {
            // Filter out invalid or empty replies
            return !empty($reply) && !empty($reply->comment);
        });
    }

    // Count total replies recursively (using closure to avoid redeclaration)
    $countAllReplies = function($replies) use (&$countAllReplies) {
        if (!$replies || (!is_array($replies) && !$replies instanceof \Illuminate\Support\Collection)) {
            return 0;
        }
        $count = $replies instanceof \Illuminate\Support\Collection ? $replies->count() : count($replies);
        foreach ($replies as $reply) {
            if (isset($reply->replies) && !empty($reply->replies)) {
                $nestedReplies = collect($reply->replies)->filter(function ($r) {
                    return !empty($r) && !empty($r->comment);
                });
                if ($nestedReplies->count() > 0) {
                    $count += $countAllReplies($nestedReplies);
                }
            }
        }
        return $count;
    };

    $totalReplies = $countAllReplies($replies);

    // Debug: Add some logging to understand the issue
    // Uncomment these lines to debug reply counting issues
    /*
    error_log("Review ID: " . ($reviewId ?? 'null') . ", Level: $level, Total Replies: $totalReplies, Replies Count: " . $replies->count());
    error_log("Replies data: " . json_encode($replies->toArray()));
    if ($replies->count() > 0) {
        error_log("First reply: " . json_encode($replies->first()));
    }
    */

    // Determine if we can still add replies at this level
    $canReply = $level < $maxLevel;
@endphpSON
    $r = $review;
    // if it's an array, convert to object
if (is_array($r)) {
    $r = (object) $r;
}

$reviewId = $r->id ?? null;
$level = $level ?? 0; // Track nesting level (0 = top level, 1 = reply, 2 = reply to reply)
$maxLevel = 2; // Maximum 3 levels (0, 1, 2) like Facebook

// name resolution: prefer user relation, then name field, else 'Anonymous'
$reviewAuthor = 'Anonymous';
if (isset($r->user) && is_object($r->user) && isset($r->user->first_name) && $r->user->first_name) {
    $reviewAuthor = $r->user->first_name;
} elseif (!empty($r->name)) {
    $reviewAuthor = $r->name;
}

// created_at: if Carbon instance, use diffForHumans, else print string
$created = '';
if (!empty($r->created_at)) {
    try {
        if (is_object($r->created_at) && method_exists($r->created_at, 'diffForHumans')) {
            $created = $r->created_at->diffForHumans();
        } else {
            $created = \Carbon\Carbon::parse($r->created_at)->diffForHumans();
        }
    } catch (\Exception $e) {
        $created = (string) $r->created_at;
    }
}

$rating = $r->rating ?? null;
$commentText = $r->comment ?? ($r->review ?? '');

// Truncate long comments for "See more" functionality
$maxLength = 150;
$isLongComment = strlen($commentText) > $maxLength;
$shortComment = $isLongComment ? substr($commentText, 0, $maxLength) : $commentText;

// ensure replies is a collection (or array) we can iterate
$replies = collect();
if (!empty($r->replies)) {
    // if replies is array or collection, normalize to collection of objects
    $replies = collect($r->replies)
        ->map(function ($it) {
            if (is_array($it)) {
                return (object) $it;
            }
            return $it;
        })
        ->filter(function ($reply) {
            // Filter out invalid or empty replies
            return !empty($reply) && !empty($reply->comment);
        });
}

// Count total replies recursively (using closure to avoid redeclaration)
$countAllReplies = function ($replies) use (&$countAllReplies) {
    if (!$replies || (!is_array($replies) && !$replies instanceof \Illuminate\Support\Collection)) {
        return 0;
    }
    $count = $replies instanceof \Illuminate\Support\Collection ? $replies->count() : count($replies);
    foreach ($replies as $reply) {
        if (isset($reply->replies) && !empty($reply->replies)) {
            $nestedReplies = collect($reply->replies)->filter(function ($r) {
                return !empty($r) && !empty($r->comment);
            });
            if ($nestedReplies->count() > 0) {
                $count += $countAllReplies($nestedReplies);
            }
        }
    }
    return $count;
};

$totalReplies = $countAllReplies($replies);

// Debug: Add some logging to understand the issue
// error_log("Review ID: " . ($reviewId ?? 'null') . ", Level: $level, Total Replies: $totalReplies, Replies Count: " . $replies->count());

    // Determine if we can still add replies at this level
    $canReply = $level < $maxLevel;
@endphp

<div class="facebook-comment {{ $level > 0 ? 'reply-comment' : 'main-comment' }} {{ $level >= 2 ? 'last-level' : '' }}"
    id="review-{{ $reviewId ?? 'anon' }}" data-level="{{ $level }}" data-review-id="{{ $reviewId ?? '' }}" data-total-replies="{{ $totalReplies }}">

    <div class="comment-content">
        <div class="d-flex">
            <div class="flex-shrink-0">
                <div class="comment-avatar {{ $level > 0 ? 'reply-avatar' : 'main-avatar' }}">
                    {{ strtoupper(substr($reviewAuthor, 0, 1)) }}
                </div>
            </div>
            <div class="flex-grow-1 ms-3">
                <div class="comment-bubble">
                    <div class="comment-header">
                        <strong class="comment-author">{{ $reviewAuthor }}</strong>
                        @if (isset($r->is_admin) && $r->is_admin)
                            <span class="admin-badge">Admin</span>
                        @endif
                    </div>

                    @if ($rating && $level === 0)
                        <div class="rating-stars">
                            @for ($i = 0; $i < $rating; $i++)
                                â˜…
                            @endfor
                        </div>
                    @endif

                    <div class="comment-text">
                        <span class="comment-short {{ $isLongComment ? '' : 'd-none' }}">
                            {{ $shortComment }}...
                        </span>
                        <span class="comment-full {{ !$isLongComment ? '' : 'd-none' }}">
                            {{ $commentText }}
                        </span>
                        @if ($isLongComment)
                            <button class="see-more-btn btn-link" onclick="toggleComment(this)">See more</button>
                        @endif
                    </div>
                </div>

                <div class="comment-actions">
                    @if ($canReply)
                        <button class="action-btn reply-btn" data-id="{{ $reviewId ?? '' }}">
                            <i class="fas fa-reply"></i> Reply
                        </button>
                    @endif
                   
                    @if ($totalReplies > 0 && $replies->count() > 0)
                        @if ($level === 0)
                            <button class="action-btn view-replies-btn" onclick="toggleReplies(this)">
                                <i class="fas fa-comments"></i> View {{ $totalReplies }}
                                {{ $totalReplies === 1 ? 'reply' : 'replies' }}
                            </button>
                        @else
                            <button class="action-btn view-replies-btn" onclick="toggleReplies(this)">
                                <i class="fas fa-comments"></i> {{ $totalReplies }}
                                {{ $totalReplies === 1 ? 'reply' : 'replies' }}
                            </button>
                        @endif
                    @endif

                    <span class="comment-time">{{ $created }}</span>
                </div>

                {{-- Reply Form --}}
                @if ($canReply)
                    <div class="reply-form-container d-none">
                        <form class="reply-form" method="POST"
                            action="{{ route('seminar.review.reply', $reviewId ?? '') }}">
                            @csrf
                            <input type="hidden" name="parent_id" value="{{ $reviewId ?? '' }}">
                            <input type="hidden" name="seminar_id" value="{{ request()->route('id') ?? '' }}">

                            @if (!auth()->check())
                                <div class="mb-2">
                                    <input type="text" name="name" class="form-control form-control-sm"
                                        placeholder="Your name" required>
                                </div>
                                <div class="mb-2">
                                    <input type="email" name="email" class="form-control form-control-sm"
                                        placeholder="Your email" required>
                                </div>
                            @endif

                            <div class="mb-2">
                                <textarea name="comment" class="form-control form-control-sm" rows="2" placeholder="Write a reply..." required></textarea>
                            </div>

                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary btn-sm">Reply</button>
                                <button type="button" class="btn btn-link btn-sm cancel-reply">Cancel</button>
                            </div>
                        </form>
                    </div>
                @endif
            </div>
        </div>
    </div>

    {{-- Replies container --}}
    @if (!empty($replies) && $replies->count() > 0 && $totalReplies > 0)
        <div class="replies-container {{ $level === 0 ? 'main-replies' : 'nested-replies' }} {{ $level >= 1 ? 'd-none' : '' }}"
            data-level="{{ $level }}">
            @foreach ($replies as $reply)
                @php
                    // Skip if reply duplicates the parent
                    $skip = false;
                    $rep = $reply;
                    if (is_array($rep)) {
                        $rep = (object) $rep;
                    }
                    if (!empty($rep->id) && !empty($reviewId) && $rep->id == $reviewId) {
                        $skip = true;
                    }
                    // or identical comment + timestamp
                    if (
                        !$skip &&
                        isset($rep->comment) &&
                        isset($r->comment) &&
                        isset($rep->created_at) &&
                        isset($r->created_at)
                    ) {
                        if (
                            trim((string) $rep->comment) === trim((string) $r->comment) &&
                            (string) $rep->created_at === (string) $r->created_at
                        ) {
                            $skip = true;
                        }
                    }
                @endphp
                @if (!$skip)
                    @include('frontend.pages.seminer.partials._review', [
                        'review' => $reply,
                        'level' => $level + 1,
                    ])
                @endif
            @endforeach
        </div>
    @endif
</div>

@push('styles')
    <style>
        /* Facebook-like Comment System Styles */
        .facebook-comment {
            margin-bottom: 12px;
            position: relative;
        }

        .facebook-comment.main-comment {
            margin-bottom: 20px;
        }

        .facebook-comment.reply-comment {
            margin-left: 44px;
            margin-bottom: 8px;
        }

        .facebook-comment.last-level {
            opacity: 0.9;
        }

        /* Avatar Styles */
        .comment-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 14px;
            color: white;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            flex-shrink: 0;
        }

        .comment-avatar.main-avatar {
            width: 44px;
            height: 44px;
            font-size: 16px;
        }

        .comment-avatar.reply-avatar {
            width: 32px;
            height: 32px;
            font-size: 12px;
        }

        /* Comment Bubble */
        .comment-bubble {
            background: #f0f2f5;
            border-radius: 18px;
            padding: 12px 16px;
            position: relative;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .facebook-comment.reply-comment .comment-bubble {
            background: #e4e6ea;
            border-radius: 16px;
            padding: 8px 12px;
        }

        /* Comment Header */
        .comment-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 4px;
        }

        .comment-author {
            font-weight: 600;
            font-size: 14px;
            color: #050505;
        }

        .admin-badge {
            background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            color: white;
            font-size: 10px;
            padding: 2px 6px;
            border-radius: 10px;
            font-weight: 600;
        }

        /* Rating Stars */
        .rating-stars {
            color: #ffa500;
            font-size: 14px;
            margin-bottom: 8px;
        }

        /* Comment Text */
        .comment-text {
            font-size: 14px;
            line-height: 1.4;
            color: #1c1e21;
            word-wrap: break-word;
        }

        .see-more-btn {
            color: #65676b;
            font-size: 14px;
            font-weight: 600;
            padding: 0;
            margin-left: 4px;
            text-decoration: none !important;
        }

        .see-more-btn:hover {
            color: #1877f2;
            text-decoration: underline !important;
        }

        /* Comment Actions */
        .comment-actions {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-top: 8px;
            padding-left: 16px;
        }

        .action-btn {
            background: none;
            border: none;
            color: #65676b;
            font-size: 12px;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .action-btn:hover {
            background: rgba(0, 0, 0, 0.05);
            color: #1877f2;
        }

        .action-btn i {
            font-size: 10px;
        }

        .replies-count {
            font-size: 12px;
            color: #65676b;
            font-weight: 600;
        }

        .comment-time {
            font-size: 12px;
            color: #65676b;
            margin-left: auto;
        }

        /* Reply Form */
        .reply-form-container {
            margin-top: 8px;
            padding-left: 16px;
        }

        .reply-form {
            background: white;
            border: 1px solid #dddfe2;
            border-radius: 16px;
            padding: 12px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .reply-form .form-control {
            border: 1px solid #dddfe2;
            border-radius: 16px;
            font-size: 14px;
        }

        .reply-form .form-control:focus {
            border-color: #1877f2;
            box-shadow: 0 0 0 2px rgba(24, 119, 242, 0.2);
        }

        .reply-form .btn {
            font-size: 12px;
            padding: 4px 12px;
        }

        /* Replies Container */
        .replies-container {
            margin-top: 12px;
        }

        .replies-container.main-replies {
            margin-left: 44px;
            padding-left: 16px;
            border-left: 2px solid #e4e6ea;
        }

        .replies-container.nested-replies {
            margin-left: 32px;
            padding-left: 12px;
            border-left: 1px solid #e4e6ea;
        }

        /* Hover Effects */
        .facebook-comment:hover .comment-actions {
            opacity: 1;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .facebook-comment.reply-comment {
                margin-left: 20px;
            }

            .comment-actions {
                flex-wrap: wrap;
                gap: 8px;
            }

            .comment-time {
                margin-left: 0;
                margin-top: 4px;
                width: 100%;
            }
        }

        /* Animation */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .facebook-comment {
            animation: fadeIn 0.3s ease;
        }

        /* Loading States */
        .comment-loading {
            display: inline-block;
            width: 12px;
            height: 12px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #1877f2;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>
@endpush

@push('scripts')
    <script>
        function toggleComment(btn) {
            const commentText = btn.closest('.comment-text');
            const shortText = commentText.querySelector('.comment-short');
            const fullText = commentText.querySelector('.comment-full');

            if (shortText.classList.contains('d-none')) {
                shortText.classList.remove('d-none');
                fullText.classList.add('d-none');
                btn.textContent = 'See more';
            } else {
                shortText.classList.add('d-none');
                fullText.classList.remove('d-none');
                btn.textContent = 'See less';
            }
        }

        function toggleReplies(btn) {
            const comment = btn.closest('.facebook-comment');
            const repliesContainer = comment.querySelector('.replies-container');
            const level = parseInt(comment.dataset.level) || 0;
            const totalReplies = parseInt(comment.dataset.totalReplies) || 0;

            if (!repliesContainer) {
                console.warn('No replies container found');
                return;
            }

            if (repliesContainer.classList.contains('d-none')) {
                repliesContainer.classList.remove('d-none');
                if (level === 0) {
                    btn.innerHTML = '<i class="fas fa-comments"></i> Hide replies';
                } else {
                    btn.innerHTML = '<i class="fas fa-comments"></i> Hide replies';
                }
            } else {
                repliesContainer.classList.add('d-none');
                if (level === 0) {
                    btn.innerHTML = `<i class="fas fa-comments"></i> View ${totalReplies} ${totalReplies === 1 ? 'reply' : 'replies'}`;
                } else {
                    btn.innerHTML = `<i class="fas fa-comments"></i> ${totalReplies} ${totalReplies === 1 ? 'reply' : 'replies'}`;
                }
            }
        }

        // Handle reply button clicks
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('reply-btn') || e.target.closest('.reply-btn')) {
                const btn = e.target.classList.contains('reply-btn') ? e.target : e.target.closest('.reply-btn');
                const comment = btn.closest('.facebook-comment');
                const replyForm = comment.querySelector('.reply-form-container');

                // Hide all other reply forms
                document.querySelectorAll('.reply-form-container').forEach(form => {
                    if (form !== replyForm) {
                        form.classList.add('d-none');
                    }
                });

                // Toggle current form
                replyForm.classList.toggle('d-none');

                if (!replyForm.classList.contains('d-none')) {
                    const textarea = replyForm.querySelector('textarea');
                    if (textarea) {
                        textarea.focus();
                    }
                }
            }

            if (e.target.classList.contains('cancel-reply') || e.target.closest('.cancel-reply')) {
                const comment = e.target.closest('.facebook-comment');
                const replyForm = comment.querySelector('.reply-form-container');
                replyForm.classList.add('d-none');
            }
        });

        // Auto-resize textareas
        document.addEventListener('input', function(e) {
            if (e.target.tagName === 'TEXTAREA') {
                e.target.style.height = 'auto';
                e.target.style.height = e.target.scrollHeight + 'px';
            }
        });
    </script>
@endpush
